/* Copyright 2019 The Waymo Open Dataset Authors. All Rights Reserved.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================*/

// metric들의 추적과 감지를 계산하기 위해 다양한 프로토콜

syntax = "proto2";

package waymo.open_dataset;

import "waymo_open_dataset/dataset.proto";
import "waymo_open_dataset/label.proto";
import "waymo_open_dataset/protos/breakdown.proto";
import "waymo_open_dataset/protos/scenario.proto";

// waymo.open_dataset.Label에 대한 wrapper: metrics 연산에 대한 신뢰도 등 다른 정보들을 추가할 수 있는 프로토콜도 존재
message Object {
  optional Label object = 1;
  // 신뢰도는 0과 1 사이에 존재하는 값, ground truth에 대해서는 기본값으로 1.0의 신뢰도를 가짐
  optional float score = 2 [default = 1.0];

  // 해당 객체가 NLZ(no label zone)과 겹치는지 판단, 사용자가 이 field 설정할 필요는 없음
  optional bool overlap_with_nlz = 3;

  // leaderboard에서 평가될 때 반드시 설정되어 있어야 하는 값: dataset.proto에 정의된 Context.name으로 설정되어야 함
  optional string context_name = 4;
  // dataset.proto에 정의된 Frame.timestamp_micros로 설정해야 함
  optional int64 frame_timestamp_micros = 5;

  // 이 객체가 카메라 이미지 라벨링이나 예측에 사용될 경우 객체를 고유하게 식별할 수 있게 값을 채워야 함
  optional CameraName.Name camera_name = 6;
}

message NoLabelZoneObject {
  optional Polygon2dProto zone = 1;
  optional string context_name = 2;
  optional int64 frame_timestamp_micros = 3;
}

message Objects {
  repeated Object objects = 1;

  // 사용자가 이 field 설정할 필요는 없음
  repeated NoLabelZoneObject no_label_zone_objects = 2;
}

// 다양한 type 지원 가능, 각각의 matcher는 고유한 ID를 가진다
message MatcherProto {
  enum Type {
    TYPE_UNKNOWN = 0;
    // 일치하는 모든 쌍의 IoU 합계를 최대화하는 헝가리 알고리즘 기반 matching
    TYPE_HUNGARIAN = 1;
    // 점수순으로 배열한 탐지값들을 하나씩 최대 IoU의 ground truth에 match시키는 COCO 스타일 matcher
    TYPE_SCORE_FIRST = 2;
    TYPE_HUNGARIAN_TEST_ONLY = 100;
  }
}

// 난이도 
message Difficulty {
  // 설정된 난이도가 없을 경우 가장 높은 난이도
  repeated Label.DifficultyLevel levels = 1;
}

// 탐지/추적 metrics를 계산하는 configuration
message Config {
  repeated float score_cutoffs = 1;
  // score_cutoffs 설정되지 않은 경우 예측값의 분포를 기반으로 cutoff, num_descore_cutoffs 설정
  // NOTE: 이 field는 더 이상 사용되지 않음, 위의 score_cutoffs를 수동으로 설정
  // TODO: clean this up.
  optional int32 num_desired_score_cutoffs = 2;
  // 사용자는 ID만 지정하면 됨, 다른 정보는 지정할 수 없음
  repeated Breakdown.GeneratorId breakdown_generator_ids = 3;
  // breakdown_generator_ids와 같은 크기를 가짐, 각 입력은 각각에 해당하는 breakdown generator에 대해 고려되어야 하는 난이도를 나타냄
  repeated Difficulty difficulties = 4;
  optional MatcherProto.Type matcher_type = 5;
  // label 유형별로 인덱싱, label 종류 + 1 = 크기, 값은 0.0과 1.0 사이에 존재해야 함
  repeated float iou_thresholds = 6;
  optional Label.Box.Type box_type = 7;

  // 평균 정밀도 계산 위해 P/R 곡선 샘플링할 때 delta 호출
  optional float desired_recall_delta = 8 [default = 0.05];

  ////////////////////////////////////////////////////////////////////////////
  // 사용자는 다른 정보는 수정할 수 없음
  ////////////////////////////////////////////////////////////////////////////
  // 다른 정보가 수정되었을 경우 이 값 아래의 모든 정밀도는 0으로 간주
  optional float min_precision = 9 [default = 0.0];
  // 최소의 정확도 설정 - 이보다 낮을 경우 모두 거짓으로 간주
  optional float min_heading_accuracy = 10 [default = -1.0];
}

message DetectionMeasurement {
  // 거짓 양성의 개수
  optional int32 num_fps = 1;
  // 참 양성의 개수
  optional int32 num_tps = 2;
  // 거짓 음성의 개수
  optional int32 num_fns = 3;

  // 모든 TP에 대한 heading accuray의 합계
  optional float sum_ha = 4;

  // 계산 위해 사용된 cutoff(선택 사항)
  // The score cutoff used to compute this measurement. Optional.
  optional float score_cutoff = 5;
}

message DetectionMeasurements {
  repeated DetectionMeasurement measurements = 1;
  optional Breakdown breakdown = 2;
}

message DetectionMetrics {
  optional float mean_average_precision = 1;
  optional float mean_average_precision_ha_weighted = 2;

  repeated float precisions = 3;
  repeated float recalls = 4;
  repeated float precisions_ha_weighted = 5;
  repeated float recalls_ha_weighted = 6;
  repeated float score_cutoffs = 7;

  optional Breakdown breakdown = 8;
  // 원래 측정값
  optional DetectionMeasurements measurements = 9;
}

message TrackingMeasurement {
  // 거짓 음성의 개수
  optional int32 num_misses = 1;
  // 거짓 양성의 개수
  optional int32 num_fps = 2;
  // mismatch의 개수
  optional int32 num_mismatches = 3;
  // match된 모든 객체들에 대한 matching cost의 합계
  optional double matching_cost = 4;
  // match된 모든 객체들의 개수
  optional int32 num_matches = 5;
  // ground truth 객체들의 총 개수(즉, 라벨링된 객체들) 
  // Total number of ground truth objects (i.e. labeled objects).
  optional int32 num_objects_gt = 6;

  // 이 measurement 계산 위해 사용된 score cutoff
  optional float score_cutoff = 7;
}

message TrackingMeasurements {
  repeated TrackingMeasurement measurements = 1;
  optional Breakdown breakdown = 2;
}

message TrackingMetrics {
  // 정확도를 추적하는 다중 객체(누락, 불일치 및 fp의 합계)
  optional float mota = 1;
  // 정밀도를 추적하는 다중 객체(matching_cost / num_matches)
  optional float motp = 2;
  // 누락 비율 (num_misses / num_objects_gt).
  optional float miss = 3;
  // 불일치 비율 (num_mismatches / num_objects_gt).
  optional float mismatch = 4;
  // 거짓 양성 비율 (num_fps / num_objects_gt).
  optional float fp = 5;

  optional float score_cutoff = 6;

  optional Breakdown breakdown = 7;
  // 원래 측정값
  optional TrackingMeasurements measurements = 8;
}
